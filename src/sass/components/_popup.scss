.popup {
  height: 100vh;
  width: 100%;
  position: fixed; //so it does not move as we scroll
  top: 0;
  left: 0;
  background-color: rgba(black, 0.8);
  z-index: 6000; //we gave it a really high one otherwise some components (like button) are not covered

  opacity: 0; //we don't use display:none because we would not be able to animate it
  visibility: hidden; //we hidden also the content, otherwise it will just be there and be just not visible
  transition: all 0.3s;

  //below it means if these two are supported then we apply the property between brakets
  @supports (-webkit-backdrop-filter: blur(10px)) or
    (backdrop-filter: blur(10px)) {
    -webkit-backdrop-filter: blur(10px);
    backdrop-filter: blur(
      10px
    ); //this property currently does not work in Chrome
    background-color: rgba(black, 0.3);
  }

  &__content {
    @include centered;
    width: 75%;
    background-color: $color-white;
    box-shadow: 0 2rem 4rem rgba(black, 0.2);
    border-radius: 3px;
    display: table; //related to table below
    overflow: hidden; //handy tip to remove the picture from the angles where we have the border radius

    opacity: 0;
    //transform: scale(0.5); //these will not work because we will have two transofrm at the same time (the first one is inside "centered")
    transform: translate(-50%, -50%) scale(0.25);
    transition: all 0.4s 0.2s; //"0.2s" is basically the value for the delay, so basically we first allow the black background to show and then we fade in the popup box
  }

  &__left {
    width: 33.3333%;
    //float: left;
    //we don't use floating otherwise the two parts don't have the same height and it would be difficult to center one in respect to the other part.
    //so we use table-cell
    display: table-cell;

    @include respond(tab-port) {
      display: flex; //flex in modo da metterla una dopo l'altra anziche' una sopra l'altra
      width: 40%;
    }

    @include respond(phone) {
      display: none; //non voglio le immagini nel telefono perche non c'e spazio
    }
  }
  &__right {
    width: 66.6667%;
    //float: left; //could be rigth but it does not really matter because they have 100% together anyway
    display: table-cell;
    vertical-align: middle; //thanks to table-cell we can use this parameter and center all to the middle
    padding: 5rem 3rem;

    @include respond(tab-port) {
      float: top;
      display: block; //
    }
  }
  &__img {
    display: block; //that is usually a good idea to do
    width: 100%;
  }

  &__text {
    font-size: 1.4rem;
    margin-bottom: 4rem;

    -moz-column-count: 2;
    -moz-column-gap: 4rem;
    -moz-column-rule: 1px;

    column-count: 2; //this is a new CSS feature to divide the text into columns
    column-gap: 4rem;
    column-rule: 1px solid $color-secondary;

    hyphens: auto; //to make the breaks on the text, but it needs a lot of prefix to work properly
    -moz-hyphens: auto;
    -ms-hyphens: auto;
    -webkit-hyphens: auto;

    @include respond(tab-port) {
      margin-bottom: 2rem;
      column-count: 1;
    }
  }

  //the target is basically the target of the anchor
  &:target {
    opacity: 1;
    visibility: visible;
  }

  //when the popup become the target we style the "__content" element
  &:target &__content {
    opacity: 1;
    transform: translate(-50%, -50%) scale(1);
  }

  &__close {
    //this code below is no needed because when popup is not the target anymore the CSS from ":target" will not apply anymore
    /*
        opacity: 0;
        visibility: hidden;
          */

    &:link,
    &:visited {
      color: grey;
      position: absolute; //it will position relative to the popup__content because is the first parent element with a relative position
      top: 2.4rem;
      right: 2.5rem;
      font-size: 3rem;
      text-decoration: none;
      display: inline-block;
      line-height: 1; //to remove the predefined one
    }

    &:hover {
      color: $color-secondary;
    }
  }
}
