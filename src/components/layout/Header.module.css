.header {
  height: 95vh; /*vh is viewport height, 1vh for example is equal to 1% of the viewport height*/
  background-image: linear-gradient(
      to left top,
      rgba(226, 225, 225, 0.8),
      rgba(61, 57, 53, 0.8)
    ),
    url("/src/assets/img/background_block.jpg"); /*in this situation we have two background images on top of each other, the first one is the linear gradient the second one is the image*/
  background-size: cover;
  background-position: top; /*it ensure that the top of the image always stays at the top of the container*/
  clip-path: polygon(
    0 0,
    100% 0,
    100% 85%,
    0 100%
  ); /*this gives the cut out effect on the back ground image*/

  position: relative;
}

.logo_box {
  /*a good way to position the logo box  is to use absolute positioning */
  position: absolute;
  top: 40px;
  left: 40px;
}

.logo {
  height: 55px;
}

.heading_primary {
  color: #3d3935;
  text-transform: uppercase;
  backface-visibility: hidden; /*this property is just to remove the shaking unwanted effect from this heading element when the titles are animating*/
}

.heading_primary_main {
  display: block; /*the default configuration is to be displayed as a text element, so without this configuration they would be one after the other and they would not occupy 100% of the width*/
  font-size: 30px;
  font-weight: 700;
  letter-spacing: 35px;

  /*these below are the least animation properties that are required to work*/
  animation-name: moveInLeft;
  animation-duration: 1s;

  /*these are some additionals property that we can use*/
  animation-timing-function: ease-out; /*more info at https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timing-function*/
  /*
  animation-delay: 3s;
  animation-iteration-count: 3; /*in this case it will happen 3 times*/
}

.heading_primary_sub {
  display: block;
  font-size: 20px;
  font-weight: 400;
  letter-spacing: 15px;

  /*
  animation-name: moveInRight;
  animation-duration: 1s;
  animation-timing-function: ease-out;
  */

  /*here above can be written quickly like this*/
  animation: moveInRight 1s ease-out;
}

.text_box {
  position: absolute;
  top: 40%;
  left: 50%;
  transform: translate(-50%, -50%);
  /*to make it clear, "top" and "left" are in relation to the parent element. but when we translate it, it is in relation to the element itself and this make possible that the element is exactly at the center*/
}

/*here we create the animation that we want to display*/
/*for browser performances is better to only animate 2 properties, 1 is opacity and the other 1 would be the transform property*/
@keyframes moveInLeft {
  /*here is where the animation start*/
  0% {
    opacity: 0;
    transform: translateX(-100px);
  }

  80% {
    opacity: 0.8;
    transform: translateX(10px);
  }
  /*here is where the animation finish*/
  100% {
    opacity: 1;
    transform: translate(
      0
    ); /*if we translate 0, it will look the way that it just looks now*/
  }
}

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(100px);
  }

  80% {
    opacity: 0.8;
    transform: translateX(-10px);
  }
  100% {
    opacity: 1;
    transform: translate(0);
  }
}
