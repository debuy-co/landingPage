.header {
  height: 95vh; /*vh is viewport height, 1vh for example is equal to 1% of the viewport height*/
  background-image: linear-gradient(
      to left top,
      rgba(226, 225, 225, 0.8),
      rgba(61, 57, 53, 0.8)
    ),
    url("/src/assets/img/background_block.jpg"); /*in this situation we have two background images on top of each other, the first one is the linear gradient the second one is the image*/
  background-size: cover;
  background-position: top; /*it ensure that the top of the image always stays at the top of the container*/
  clip-path: polygon(
    0 0,
    100% 0,
    100% 85%,
    0 100%
  ); /*this gives the cut out effect on the back ground image*/

  position: relative;
  /*
  when using "position" in CSS we have to consider:
  RELATIVE -> The element is positioned according to the normal flow of the document, and then offset relative to itself based on the values of top, right, bottom, and left.
  ABSOLUTE -> The element is removed from the normal document flow, and no space is created for the element in the page layout. It is positioned relative to its closest positioned ancestor, if any;
  */
}
/*we are now going to change all the px variables to rem. Rem is in relation to the root font size*/

.header__logo-box {
  /*a good way to position the logo box  is to use absolute positioning */
  position: absolute;
  top: 4rem;
  left: 4rem;
}

.header__logo {
  height: 6rem;
}

.header__button-box {
  position: absolute;
  top: 4rem;
  right: 15rem;
}

/*A CSS pseudo-class is a keyword added to a selector that specifies a special state of the selected element(s). For example, the pseudo-class :hover can be used to select a button when a user's pointer hovers over the button and this selected button can then be styled.*/
/*:
link -> Matches links that have not yet been visited.
visited -> Matches links that have been visited.
*/
/*we want to the "visited" state to looks exactly like the "link" state*/
.btn:link,
.btn:visited {
  position: absolute;
  text-transform: uppercase;
  text-decoration: none;
  padding: 1.5rem 1rem; /*if we apply only 1 value it will apply for all, if we apply two instead it will cover top and lateral*/
  display: inline-block; /*If we want to apply padding we need the inline-block property, The display CSS property sets whether an element is treated as a block or inline element and the layout used for its children, such as flow layout, grid or flex.*/
  border-radius: 10rem;
  /*transition is another kind of animation, which is the more complex one usually*/
  /*and the transition property has to be in the initial state*/
  transition: all 0.2s; /*all the properties are enabled to be animated*/
  font-size: 1.6rem;
}

.btn:hover {
  transform: translateY(-0.3rem); /*we move up a bit*/
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2); /*the shadow will be 10px down and 20px blur*/
}

/*this is when we click the state*/
.btn:active {
  transform: translateY(-0.1rem);
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2);
}

.btn--white {
  background-color: #3d3935;
  color: #fff;
  border-color: #fff;
}

/*A CSS pseudo-element is a keyword added to a selector that lets you style a specific part of the selected element(s). For example, ::first-line can be used to change the font of the first line of a paragraph.*/
/*::after creates a pseudo-element that is the last child of the selected element. It is often used to add cosmetic content to an element with the content property. It is inline by default*/
/*the target here is to create an element that looks exactly like the button but it is behind the button --> a PSEUDO element*/
.btn::after {
  content: ""; /*this property is necessary otherwise is not goingt to appear*/
  display: inline-block; /*this property is necessary otherwise is not goingt to appear*/
  height: 100%;
  width: 100%;
  border-radius: 10rem;
  position: absolute; /*the absolute position needs to have a reference*/
  top: 0; /*we want it to be exactly behind the main one*/
  left: 0; /*we want it to be exactly behind the main one*/
  z-index: -1; /*it defines the posiion of the element if one is on the top of the other*/
  transition: all 0.4s; /*we want it to be animated so we give some animation time to all properties*/
}

/*here below is the hover for the after element*/
.btn:hover::after {
  transform: scale(1.5);
  opacity: 0; /*opacity zero sets something to invisible, so together with the animation property (transition) it will give us a fade out effect*/
}

.btn--white::after {
  background-color: #3d3935;
  color: #fff;
  border-color: #fff;
}

.btn--animation {
  animation: moveInTop 0.5s ease-out 0.75s; /*the last value is the delay*/
  animation-fill-mode: backwards; /*in this way we say to show the first animation status when building the element, in other words the animation will apply the values defined in the first relevant keyframe as soon as it is applied to the target, and retain this during the animation-delay period*/
  /*to avoid that the element is shown and then the animation start, since there is animation delay*/
}

.heading_primary {
  color: #3d3935;
  text-transform: uppercase;
  backface-visibility: hidden; /*this property is just to remove the shaking unwanted effect from this heading element when the titles are animating*/
}

.heading_primary--main {
  display: block; /*the default configuration is to be displayed as a text element, so without this configuration they would be one after the other and they would not occupy 100% of the width*/
  font-size: 3rem;
  font-weight: 700;
  letter-spacing: 3.5rem;

  /*these below are the least animation properties that are required to work*/
  animation-name: moveInLeft;
  animation-duration: 1s;

  /*these are some additionals property that we can use*/
  animation-timing-function: ease-out; /*more info at https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timing-function*/
  /*
  animation-delay: 3s;
  animation-iteration-count: 3; /*in this case it will happen 3 times*/
}

.heading_primary--sub {
  display: block;
  font-size: 2rem;
  font-weight: 400;
  letter-spacing: 1.5rem;

  /*
  animation-name: moveInRight;
  animation-duration: 1s;
  animation-timing-function: ease-out;
  */

  /*here above can be written quickly like this*/
  animation: moveInRight 1s ease-out;
}

.header__text-box {
  position: absolute;
  top: 40%;
  left: 50%;
  transform: translate(-50%, -50%);
  /*to make it clear, "top" and "left" are in relation to the parent element. but when we translate it, it is in relation to the element itself and this make possible that the element is exactly at the center*/
}

/*here we create the animation that we want to display*/
/*for browser performances is better to only animate 2 properties, 1 is opacity and the other 1 would be the transform property*/
@keyframes moveInLeft {
  /*here is where the animation start*/
  0% {
    opacity: 0;
    transform: translateX(-10rem);
  }

  80% {
    opacity: 0.8;
    transform: translateX(1rem);
  }
  /*here is where the animation finish*/
  100% {
    opacity: 1;
    transform: translate(
      0
    ); /*if we translate 0, it will look the way that it just looks now*/
  }
}

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem);
  }

  80% {
    opacity: 0.8;
    transform: translateX(-1rem);
  }
  100% {
    opacity: 1;
    transform: translate(0);
  }
}

@keyframes moveInTop {
  0% {
    opacity: 0;
    transform: translateY(-5rem);
  }

  100% {
    opacity: 1;
    transform: translateY(0);
  }
}
